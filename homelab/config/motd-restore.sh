#!/bin/bash

# Script to restore custom MOTD configuration

# --- Configuration (from your original script) ---
HOST_DB="https://raw.githubusercontent.com/ayala/dotfiles/main/homelab/config/host-db"
LOCAL_HOST_DB_PATH="/tmp/host-db" # Temporary local path for the downloaded file
CUSTOM_MOTD="/etc/update-motd.d/99-custom"
STATIC_MOTD="/etc/motd" # Path to the static MOTD file

# --- Functions (modified for restoration) ---

# download the host-db file from GitHub
download_host_db() {
    echo "Attempting to download host-db from $HOST_DB..."
    if ! curl -L "$HOST_DB" -o "$LOCAL_HOST_DB_PATH"; then
        echo "Error: Failed to download host-db from GitHub. Please check the URL and your network connection."
        exit 1
    fi
    echo "host-db downloaded successfully to $LOCAL_HOST_DB_PATH."
}

# configure SSHD PrintMotd directive (only what's needed for display)
configure_sshd_printmotd_only() {
    echo "Configuring SSHD PrintMotd directive to 'yes'..."

    if grep -q "^PrintMotd" /etc/ssh/sshd_config; then
        sed -i 's/^PrintMotd.*/PrintMotd yes/' /etc/ssh/sshd_config
    else
        echo "PrintMotd yes" >> /etc/ssh/sshd_config
    fi

    systemctl reload sshd || service sshd reload || echo "Warning: Could not reload sshd. Please do so manually if needed."
    echo "SSHD PrintMotd configured to 'yes'."
}

# generate the custom MOTD script (as in your original script)
create_custom_motd() {
    local hostname=$(hostname)
    local custom_banner=""

    echo "Generating custom MOTD for hostname: $hostname"

    if [[ ! -f "$LOCAL_HOST_DB_PATH" ]]; then
        echo "Error: Downloaded host-db file not found at $LOCAL_HOST_DB_PATH. This should not happen if download_host_db succeeded."
        echo "Using figlet for banner as a fallback."
    fi

    if [[ -f "$LOCAL_HOST_DB_PATH" ]]; then
        local found=false
        local start_reading=false
        while IFS= read -r line; do
            if [[ "$line" == "#START_HOST:$hostname" ]]; then
                start_reading=true
                found=true
                continue
            elif [[ "$line" == "#END_HOST:$hostname" ]]; then
                start_reading=false
                break
            elif [[ -z "$line" && "$start_reading" == true ]]; then
                custom_banner+="\n"
            fi

            if [[ "$start_reading" == true ]]; then
                custom_banner+="$line\n"
            fi
        done < "$LOCAL_HOST_DB_PATH"
    fi

    if [[ -z "$custom_banner" ]]; then
        echo "No custom banner found for $hostname in $LOCAL_HOST_DB_PATH. Using figlet."
        custom_banner=$(clear && figlet -f sliver.flf "${hostname}" && echo "")
    fi

    cat << EOF > "$CUSTOM_MOTD"
#!/bin/bash

# Custom MOTD generated by PVE MOTD script

# Ensure lolcat is available
if ! command -v lolcat &> /dev/null; then
    echo "lolcat not found. Displaying banner without color."
    printf "%b" "$custom_banner"
else
    printf "%b" "$custom_banner" | lolcat --force && echo ""
fi

EOF

    chmod +x "$CUSTOM_MOTD"
    echo "Custom MOTD script created at $CUSTOM_MOTD"
}

# Ensure 99-custom is executable (in case permissions were changed)
ensure_custom_motd_executable() {
    echo "Ensuring $CUSTOM_MOTD is executable..."
    if [[ -f "$CUSTOM_MOTD" ]]; then
        chmod +x "$CUSTOM_MOTD"
        echo "$CUSTOM_MOTD is now executable."
    else
        echo "Warning: Custom MOTD script $CUSTOM_MOTD not found. It will be recreated."
        create_custom_motd # Recreate if not found
    fi
}

# --- Main script logic ---

echo "Starting Custom MOTD Restoration Script..."

# The 'last login' script primarily affects PrintLastLog.
# We need to ensure PrintMotd is set to 'yes' for our custom MOTD to show.
configure_sshd_printmotd_only

# Download the host-db to ensure we have the latest banner data
download_host_db

# Create/Recreate the custom MOTD script
create_custom_motd

# Ensure it's executable
ensure_custom_motd_executable

echo "Custom MOTD restoration complete. Please log out and back in to see the changes."

# --- Cleanup ---
if [[ -f "$LOCAL_HOST_DB_PATH" ]]; then
    rm "$LOCAL_HOST_DB_PATH"
    echo "Cleaned up temporary host-db file: $LOCAL_HOST_DB_PATH"
fi
